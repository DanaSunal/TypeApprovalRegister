const forwardingConstructAutomationInput = require('onf-core-model-ap/applicationPattern/onfModel/services/models/forwardingConstruct/AutomationInput');
const httpServerInterface = require('onf-core-model-ap/applicationPattern/onfModel/models/layerProtocols/HttpServerInterface');
const tcpServerInterface = require('onf-core-model-ap/applicationPattern/onfModel/models/layerProtocols/TcpServerInterface');
const onfFormatter = require('onf-core-model-ap/applicationPattern/onfModel/utility/OnfAttributeFormatter');
const prepareALTForwardingAutomation = require('onf-core-model-ap-bs/basicServices/services/PrepareALTForwardingAutomation');
const logicalTerminationPoint = require('onf-core-model-ap/applicationPattern/onfModel/models/LogicalTerminationPoint');
const LayerProtocol = require('onf-core-model-ap/applicationPattern/onfModel/models/LayerProtocol');
const operationServerInterface = require('onf-core-model-ap/applicationPattern/onfModel/models/layerProtocols/OperationServerInterface');
const onfPaths = require('onf-core-model-ap/applicationPattern/onfModel/constants/OnfPaths');


const fileOperation = require('onf-core-model-ap/applicationPattern/databaseDriver/JSONDriver');
const httpClientInterface = require('onf-core-model-ap/applicationPattern/onfModel/models/layerProtocols/HttpClientInterface');
const tcpClientInterface = require('onf-core-model-ap/applicationPattern/onfModel/models/layerProtocols/TcpClientInterface');

exports.regardApplication = function (applicationName, releaseNumber , approvalStatus) {
    return new Promise(async function (resolve, reject) {
        let forwardingConstructAutomationList = [];
        try {
            /***********************************************************************************
             * RegisteringCausesInfoAboutApprovalStatusToRegistryOffice /v1/update-approval-status
             ************************************************************************************/
            let approvalStatusForwardingName = "RegisteringCausesInfoAboutApprovalStatusToRegistryOffice";
            let approvalStatusContext;
            let approvalStatusRequestBody = {};
            approvalStatusRequestBody.applicationName = applicationName;
            approvalStatusRequestBody.applicationReleaseNumber = releaseNumber;
            approvalStatusRequestBody.approvalStatus = approvalStatus;
            approvalStatusRequestBody = onfFormatter.modifyJsonObjectKeysToKebabCase(approvalStatusRequestBody);
            let forwardingAutomation = new forwardingConstructAutomationInput(
                approvalStatusForwardingName,
                approvalStatusRequestBody,
                approvalStatusContext
            );
            forwardingConstructAutomationList.push(forwardingAutomation);
            
            resolve(forwardingConstructAutomationList);
        } catch (error) {
            reject(error);
        }
    });
}